The module, ``2-matrix_divided.py`` supplies one function, matrix_divided,
which takes a matrix and divisor as arguments

The function ``matrix_divided(matrix, div)`` divides all elements of the ``matrix``
argument with ``div`` and returns a new matrix

Usage:
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
... [2, 4, 6],
... [8, 10, 12],
... ]

>>> print(matrix_divided(matrix, 2))
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Note that quotients are rounded off to two decimal places
>>> matrix = [
... [1, 2, 3],
... [4, 5, 6]
... ]

>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The orignal matrix is left unchanged
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

The function can handle floats
>>> matrix = [
... [1.1, -2.2, 3.3],
... [4.4, 5.5, -6.6]
... ]

>>> print(matrix_divided(matrix, 3))
[[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]

User can combine integers and floats
>>> matrix = [
... [1, -2.2, 3, 4.4, 5],
... [-6.6, 7.00, 8, 9.999, 10]
... ]

>>> print(matrix_divided(matrix, 3))
[[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

Invalid Matrices
==============

The matrix parameter must be a list of lists of integer or floats,
else TypeError is raised

>>> matrix = "non-integer or float lists"
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = None
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
TypeError: 'NoneType' object is not iterable

Note an empty matrix will raise IndexError
>>> matrix = []
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
IndexError: list index out of range

An empty list of lists is OK
>>> matrix = [[]]
>>> print(matrix_divided(matrix, 3))
[[]]

An identical TypeError is raised if the matrix passed is not a list of lists
>>> matrix = [1, 2, 3]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
TypeError: 'int' object is not iterable

Also, TypeError is raised if any element of the matrix is not n int or float
>>> matrix = [
... [1, 2, 3],
... [4, "not a number", 6]
... ]
    
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Note, all rows must be of the same size, else TypeError is raised
>>> matrix = [
... [1, 2, 3, 4],
... [5, 6, 7]
... ]
    
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size

Invalid Divisors
================
The divisor must either be an int or a float, else TypeError is raised
>>> matrix = [
... [1, 2, 3],
... [4, 5, 6]
... ]
    
>>> print(matrix_divided(matrix, "not a number"))
Traceback (most recent call last):
	...
TypeError: div must be a number

Again,
>>> print(matrix_divided(matrix, None))
Traceback (most recent call last):
	...
TypeError: div must be a number

Finally, ``div`` must be a non-zero value, otherwise ZeroDivisionError is raised
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero
