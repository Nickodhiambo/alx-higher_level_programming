The module ``4-print_square`` supplies one function, print_square
that prints a square using "#" symbol to STDOUT

The function ``print_square`` takes an int size as argument and returns
a square object based on size magnitude

Usage
=====
>>> print_square = __import__('4-print_square').print_square
>>> print_square(1)
#

>>> print_square(4)
####
####
####
####

>>> print_square(10)
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########

If size is zero, print nothing
>>> print_square(0)

Invalid Sizes
=============
The parameter ``size`` must be an integer, else ValueError is raised
>>> print_square("not an int")
Traceback (most recent call last):
	...
TypeError: size must be an integer

>>> print_square(1.1)
Traceback (most recent call last):
	...
TypeError: size must be an integer

>>> print_square(None)
Traceback (most recent call last):
	...
TypeError: size must be an integer

If size is negative, value error is raised
>>> print_square(-1)
Traceback (most recent call last):
	...
ValueError: size must be >= 0

Note: Type-checking occurs before value-checking
>>> print_square(-1.5)
Traceback (most recent call last):
	...
TypeError: size must be an integer

At least 1 argument must be provided
>>> print_square()
Traceback (most recent call last):
	...
TypeError: print_square() missing 1 required positional argument: 'size'
