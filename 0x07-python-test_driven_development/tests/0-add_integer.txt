This module supplies one function, ``add_integer``

``add_integer`` computes the sum of its two arguments

Usage:
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2, 3)
5

>>> add_integer(2, -3)
-1

The function also work with float values
>>> add_integer(1.0, 2.0)
3

Note that floats are cast into integers before addition
>>> add_integer(2.0, 0.5)
2

>>> add_integer(-2.0, 0.5)
-2

>>> add_integer(-2.0, -0.5)
-2

Float and integer values can also be combined
>>> add_integer(-1.0, 2)
1

Second argument b, is option. Is 98 by default
>>> add_integer(1)
99

Non-numbers:
arguments must either be integers or floats, else TypeError is raised
>>> add_integer("hello", 1)
Traceback (most recent call last):
	...
TypeError: a must be an integer

>>> add_integer(1, "world")
Traceback (most recent call last):
	...
TypeError: b must be an integer

>>> add_integer(None)
Traceback (most recent call last):
	...
TypeError: a must be an integer

>>> add_integer(1.3, None)
Traceback (most recent call last):
	...
TypeError: b must be an integer

if both arguments are non-numbers, a TypeError for first argument is raised
>>> add_integer("hello", "world")
Traceback (most recent call last):
	...
TypeError: a must be an integer

The function should raise an OverFlowError if supplied with an infinite argument
>>> add_integer(float('inf'))
Traceback (most recent call last):
	...
OverflowError: cannot convert float infinity to integer

>>> add_integer(1, float('inf'))
Traceback (most recent call last):
	...
OverflowError: cannot convert float infinity to integer

Again with NaN numbers
>>> add_integer(float('nan'))
Traceback (most recent call last):
	...
ValueError: cannot convert float NaN to integer

>>> add_integer(1, float('nan'))
Traceback (most recent call last):
	...
ValueError: cannot convert float NaN to integer
